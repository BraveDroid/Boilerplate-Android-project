apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-allopen'
apply plugin: 'kotlin-kapt'
apply plugin: "androidx.navigation.safeargs.kotlin"

allOpen {
    // allows mocking for classes w/o directly opening them for release builds
    annotation 'com.bravedroid.boilerplate.util.OpenClass'
}

android {
    compileSdkVersion 29
    defaultConfig {
        applicationId "com.bravedroid.boilerplate"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField 'String', 'TWITTER_CONSUMER_KEY', "\"${TwitterConsumerKeyProp}\""
        buildConfigField 'String', 'TWITTER_CONSUMER_SECRET', "\"${TwitterConsumerSecretProp}\""
    }
//    def isFromGithubActions = System.getenv("IS_FROM_GITHUB_ACTIONS")
    def signingProperties = rootProject.file("scripts/signing.properties")
    if (signingProperties.exists()) {
        def keystoreProperties = new Properties()
        keystoreProperties.load(new FileInputStream(signingProperties))
        signingConfigs {
            release {
                def _keyAlias = keystoreProperties['keyAlias']
                keyAlias _keyAlias
                println("my info message $_keyAlias")

                def _keyPassword = keystoreProperties['keyPassword']
                keyPassword _keyPassword
                println("my info message $_keyPassword")

                def _storePassword = keystoreProperties['storePassword']
                storePassword _storePassword
                println("my info message $_storePassword")

                def _storeFile = keystoreProperties['storeFile']
                if (_storeFile != null && _storeFile != "") {
                    println("my info message $_storeFile")
                    storeFile file(_storeFile)
                }
            }
        }
    } else {
        signingConfigs {
            def keystorePropertiesFile = rootProject.file(".properties/keystore.properties")
            def keystoreProperties = new Properties()
            if (keystorePropertiesFile.exists()) {
                keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
            }
            release {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storePassword keystoreProperties['storePassword']
                def storeFileObject = keystoreProperties['storeFile']
                if (storeFileObject != null)
                    storeFile file(storeFileObject)
            }
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            manifestPlaceholders = [appLabel: "Boilerplate"]
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField "String", "SERVER_URL", '"http://bravedroid.com"'
        }
        debug {
            manifestPlaceholders = [appLabel: "debug.Boilerplate"]
            applicationIdSuffix ".debug"
            debuggable true
            buildConfigField "String", "SERVER_URL", '"http://test.http://bravedroid.com"'
        }
    }
    flavorDimensions "pricing", "env"
    productFlavors {
        pro {
            dimension "pricing"
            manifestPlaceholders = [appLabelPricing: "Pro"]
            applicationIdSuffix ".pro"
        }
        free {
            dimension "pricing"
            manifestPlaceholders = [appLabelPricing: "Free"]
            applicationIdSuffix ".free"
        }

        prod {
            dimension "env"
            manifestPlaceholders = [appLabelPricing: "Normal"]
        }
        qa {
            dimension "env"
            applicationIdSuffix ".qa"
            manifestPlaceholders = [appLabelPricing: "Normal"]

        }
        dev {
            dimension "env"
            applicationIdSuffix ".dev"
            manifestPlaceholders = [appLabelPricing: "Normal"]
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
    lintOptions {
        abortOnError false
    }
    dataBinding {
        enabled = true
    }
}

configurations {
    freeDevDebugImplementation {}
    proDevDebugImplementation {}
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    //kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$version_kotlin"
    //androidx
    implementation "androidx.core:core-ktx:$version_core_ktx"
    implementation "androidx.appcompat:appcompat:$version_appcompat"
    implementation "androidx.fragment:fragment-ktx:$version_fragment_ktx"
    implementation "androidx.legacy:legacy-support-v4:$version_legacy_support_v4"
    //jetpack navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$version_nav"
    implementation "androidx.navigation:navigation-ui-ktx:$version_nav"
    //ui tools
    implementation "androidx.constraintlayout:constraintlayout:$version_constraintlayout"
    implementation "com.google.android.material:material:$version_android_material"

    ///jvm-tests
    testImplementation "junit:junit:$version_junit"
    //Mockito framework
    testImplementation "org.mockito:mockito-core:$version_mockito_core"
    //Robolectric environment
    testImplementation "androidx.test:core:$version_test_core"

    ///instrumented-tests
    //FragmentScenario
    implementation "androidx.fragment:fragment-testing:$version_fragment_testing"
    //Core library
    androidTestImplementation "androidx.test:core:$version_test_core"
    //AndroidJUnitRunner and JUnit Rules
    androidTestImplementation "androidx.test:runner:$version_test_core"
    androidTestImplementation "androidx.test:rules:$version_test_rules"
    //Mockito framework
    androidTestImplementation "org.mockito:mockito-android:$version_mockito_core"
    //Espresso
    androidTestImplementation "androidx.test.espresso:espresso-core:$version_espresso_core"
    // UI testing with UI Automator
    androidTestImplementation "androidx.test.uiautomator:uiautomator:$version_test_uiautomator"
    //Assertions
    androidTestImplementation "androidx.test.ext:junit:$version_test_ext_junit"
    androidTestImplementation "androidx.test.ext:truth:$version_test_ext_truth"
    androidTestImplementation "com.google.truth:truth:$version_truth"
    // Hamcrest library
    androidTestImplementation "org.hamcrest:hamcrest-library:$version_hamcrest_library"

    //debugging
    implementation "com.jakewharton.timber:timber:$version_timber"
    freeDevDebugImplementation "com.squareup.leakcanary:leakcanary-android:$version_leakcanary_android"
    proDevDebugImplementation "com.squareup.leakcanary:leakcanary-android:$version_leakcanary_android"
    debugImplementation "com.facebook.stetho:stetho:$version_stetho"
    debugImplementation "com.facebook.stetho:stetho-okhttp3:$version_stetho"
    debugImplementation "com.google.code.findbugs:jsr305:$version_jsr305"
}

def getApiKey() {
    def Properties props = new Properties()
    props.load(new FileInputStream(new File('secrets.properties')))
    return props['API_KEY']
}
